From e31179368392fbada8f96ac39f09c48871f3d324 Mon Sep 17 00:00:00 2001
From: Jason Hung <jhung@globalscaletechnologies.com>
Date: Mon, 13 Jan 2025 09:21:36 +0800
Subject: [PATCH 1/4] mediatek: mt8188: query onboard dram memory size

query onboard dram memory size via ddr controller register
---
 arch/arm/mach-mediatek/Kconfig        |   2 +
 arch/arm/mach-mediatek/mt8370/Kconfig |   3 +
 arch/arm/mach-mediatek/mt8370/init.c  | 106 ++++++++++++++++++++++++++
 3 files changed, 111 insertions(+)
 create mode 100644 arch/arm/mach-mediatek/mt8370/Kconfig

diff --git a/arch/arm/mach-mediatek/Kconfig b/arch/arm/mach-mediatek/Kconfig
index 72da07527d..09d1d1d956 100644
--- a/arch/arm/mach-mediatek/Kconfig
+++ b/arch/arm/mach-mediatek/Kconfig
@@ -166,4 +166,6 @@ config SERIAL_ANDROID
 	help
 	  This option contains information about the serial name used by Android.
 
+source "arch/arm/mach-mediatek/mt8370/Kconfig"
+
 endif
diff --git a/arch/arm/mach-mediatek/mt8370/Kconfig b/arch/arm/mach-mediatek/mt8370/Kconfig
new file mode 100644
index 0000000000..7d8979b7ae
--- /dev/null
+++ b/arch/arm/mach-mediatek/mt8370/Kconfig
@@ -0,0 +1,3 @@
+config MTK_PLAT_GET_DRAM_SIZE
+	bool "Query onboard DRAM size"
+	depends on TARGET_MT8370
diff --git a/arch/arm/mach-mediatek/mt8370/init.c b/arch/arm/mach-mediatek/mt8370/init.c
index 8f720c25ce..7c4e063bf8 100644
--- a/arch/arm/mach-mediatek/mt8370/init.c
+++ b/arch/arm/mach-mediatek/mt8370/init.c
@@ -14,11 +14,116 @@
 #include <asm/sections.h>
 #include <asm/system.h>
 #include <dm/uclass.h>
+#include <linux/io.h>
+#include <linux/sizes.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
+#ifdef CONFIG_MTK_PLAT_GET_DRAM_SIZE
+
+#define DRAMC_MAX_RK	2
+
+#define IO_BASE			(0x10000000)
+#define GPIO_BASE		(IO_BASE + 0x5000)
+#define GPIO_TPBANK		(GPIO_BASE + 0x000006F0)
+
+#define EMI_BASE		(IO_BASE + 0x00219000)
+#define EMI_CONA		(EMI_BASE+0x000)
+#define EMI_CONH		(EMI_BASE+0x038)
+
+uint32_t mt_get_ddr_trap_value(void)
+{
+	uint32_t trap_value = 0;
+
+	trap_value = readl(GPIO_TPBANK);
+
+	/* bit#8 MOSI0, bit#11 MOSI1 */
+	trap_value = ((trap_value >> 8) & 0x1) | ((trap_value >> 10) & 0x2);
+	return trap_value;
+}
+
+int mt_get_dram_type(void)
+{
+	return (mt_get_ddr_trap_value() & 0x2)? 0 /* LPDDR4 */ : 1 /* LPDDR4x */;
+}
+
+int mt_get_dram_channel_from_hw_trap(void)
+{
+	return (mt_get_ddr_trap_value() & 0x1)? 2 /* 2CH */ : 4 /* 4CH */;
+}
+
+int get_rank_nr_by_emi(void)
+{
+	uint32_t cen_emi_cona = readl(EMI_CONA);
+
+	if (cen_emi_cona & (0x3 << 16))
+		return 2;
+	else
+		return 1;
+}
+
+void get_rank_size_by_emi(uint64_t *dram_rank_size)
+{
+	int i;
+	uint32_t quad_ch_ratio;
+	uint32_t col_bit, row_bit;
+	uint64_t ch0_rank0_size, ch0_rank1_size;
+	uint64_t ch1_rank0_size, ch1_rank1_size;
+	uint32_t cen_emi_conh = readl(EMI_CONH);
+	uint64_t dq_width = 2;
+
+	dram_rank_size[0] = 0;
+	dram_rank_size[1] = 0;
+
+	ch0_rank0_size = (cen_emi_conh >> 16) & 0xF;
+	ch0_rank1_size = (cen_emi_conh >> 20) & 0xF;
+	ch1_rank0_size = (cen_emi_conh >> 24) & 0xF;
+	ch1_rank1_size = (cen_emi_conh >> 28) & 0xF;
+
+	quad_ch_ratio = (mt_get_dram_channel_from_hw_trap() == 4)? 2 : 1;
+
+	ch0_rank0_size = (ch0_rank0_size * quad_ch_ratio) << 28;
+	ch0_rank1_size = (ch0_rank1_size * quad_ch_ratio) << 28;
+	ch1_rank0_size = (ch1_rank0_size * quad_ch_ratio) << 28;
+	ch1_rank1_size = (ch1_rank1_size * quad_ch_ratio) << 28;
+
+	dram_rank_size[0] += ch0_rank0_size;
+
+	if (get_rank_nr_by_emi() > 1) {
+		dram_rank_size[1] += ch0_rank1_size;
+	}
+
+	if(mt_get_dram_channel_from_hw_trap() > 1) {
+		dram_rank_size[0] += ch1_rank0_size;
+
+		if (get_rank_nr_by_emi() > 1) {
+			dram_rank_size[1] += ch1_rank1_size;
+		}
+	}
+}
+
+uint64_t get_platform_dram_size(void)
+{
+	uint64_t dram_rank_size[DRAMC_MAX_RK];
+	int nr_rank = get_rank_nr_by_emi();
+	uint64_t ram_size;
+
+	get_rank_size_by_emi(dram_rank_size);
+
+	ram_size = 0;
+	for (int i = 0; i < nr_rank; i++) {
+		ram_size += dram_rank_size[i];
+	}
+	return ram_size;
+}
+#endif /* CONFIG_MTK_PLAT_GET_DRAM_SIZE */
+
 int dram_init(void)
 {
+#ifdef CONFIG_MTK_PLAT_GET_DRAM_SIZE
+	fdtdec_setup_mem_size_base();
+	gd->ram_size = get_platform_dram_size();
+#else
 	int ret;
 
 	ret = fdtdec_setup_memory_banksize();
@@ -26,6 +131,7 @@ int dram_init(void)
 		return ret;
 
 	fdtdec_setup_mem_size_base();
+#endif /* CONFIG_MTK_PLAT_GET_DRAM_SIZE */
 
 	/*
 	 * Limit gd->ram_top not exceeding SZ_4G.
-- 
2.47.1

